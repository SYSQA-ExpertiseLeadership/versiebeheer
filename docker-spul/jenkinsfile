properties([pipelineTriggers([githubPush()])])

node{
	ws("/var/opt/jenkins/workspace/${env.JOB_NAME}_${BUILD_NUMBER}"){ 
		withEnv(
			["build_ok=true",
			"gefaalde_cases='Dit zijn de gefaalde testcases :'",
			"credential_id=matthijs_git",
			"stap1=files",
			"stap2=website",
			"stap3=selenium",
			"workspace=/var/opt/jenkins/workspace/${env.JOB_NAME}_${BUILD_NUMBER}",
			"archive=/var/opt/jenkins/workspace",
			"id='een code'",
			"antwoord=1"]) {
			try{
				stage('Git pull') {
					checkout([
						$class: 'GitSCM',
						branches: [[name: '*/master']],
						doGenerateSubmoduleConfigurations: false,
						extensions: [],
						submoduleCfg: [],
						userRemoteConfigs:
						[[
							credentialsId: 'matthijs_git',
							url: 'https://github.com/SYSQA-ExpertiseLeadership/versiebeheer'
						]]
					])
				}
			}
			catch(e){
				build_ok = false
				echo e.toString()
			}
			try{
				stage(stap1){
					sh 'mkdir -p /var/opt/test/website'
					sh "cp /var/opt/jenkins/workspace/${env.JOB_NAME}_${BUILD_NUMBER}/docker-spul/website/* /var/opt/test/website/"
					sh 'mkdir -p /var/opt/test/selenium'
					//sh 'mkdir -p /var/opt/test/selenium/logs'
					sh 'chmod -R 777 /var/opt/test/selenium'
					sh "cp /var/opt/jenkins/workspace/${env.JOB_NAME}_${BUILD_NUMBER}/docker-spul/selenium/* /var/opt/test/selenium/"
				}
			}
			catch(e){
				build_ok = false
				echo e.toString()
			}
			try{
				stage(stap2) {
					sh "docker-compose -f /var/opt/test/website/Docker-compose-combi.yml up --build -d website"
					/*
					antwoord = sh (script: "docker ps -aqf 'name=${stap2}_${BUILD_NUMBER}_website-nginx_1' | xargs --no-run-if-empty docker inspect --format='{{.State.ExitCode}}'", returnStdout: true)
					if (! antwoord.trim().equals("0")){
                        sh "exit 1"
					}
					*/
					
				}
			}
			catch(e){
				build_ok = false
				echo e.toString()
			}
			try{
				stage(stap3) {
					sh "naam=${stap3} nummer=${BUILD_NUMBER} docker-compose -p '${stap3}_${BUILD_NUMBER}' -f /var/opt/test/selenium/Docker-compose-selenium.yml up --build selenium"
					sh 'ls /var/opt/test/selenium'
					sh 'docker ps -aqf name=website_selenium-test_1 | xargs --no-run-if-empty docker cp :/var/opt/test/selenium/logs /var/opt/test/selenium'
					antwoord = sh (script: "docker ps -aqf 'name=${stap3}_${BUILD_NUMBER}_selenium-test_1' | xargs --no-run-if-empty docker inspect --format='{{.State.ExitCode}}'", returnStdout: true)
					if (!antwoord.trim().equals("0")){
                        sh "exit 1"
					}
				}
			}
			catch(e){
				build_ok = false
				echo e.toString()
			}
			finally{
				//sh 'docker system prune -f'
				//sh 'docker images test-website-cicd-training -q | xargs --no-run-if-empty docker rmi -f'
				//sh 'docker ps -aqf name=website_selenium-test_1 | xargs --no-run-if-empty docker rm -f'
				//sh 'docker images selenium-test-cicd-training -q | xargs --no-run-if-empty docker rmi -f'
				dir("${archive}"){
					archiveArtifacts allowEmptyArchive: true, artifacts: '**'
				}
				if (build_ok){
					currentBuild.result = "SUCCESS"
				}
				else {
					currentBuild.result = "FAILURE"
				}
			}
		}
	}
}